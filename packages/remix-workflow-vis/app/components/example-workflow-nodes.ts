import { Position, type Node, type Edge } from "reactflow";

export const randPosition = () => ({
  x: Math.random() * 1000,
  y: Math.random() * 1000,
});

const commonNodeProps = () => ({
  sourcePosition: Position.Bottom,
  targetPosition: Position.Top,
  position: randPosition(),
});

export const workflow = {
  nodes: [
    {
      id: "scoping-inspection",
      type: "inspection:scoping",
      data: { label: "Scoping Inspection" },
      ...commonNodeProps(),
      coAssignees: [],
      canExecute: ["r:SuiteSpot Administrator"],
      phaseKey: "pre-moveout",
    },
    {
      id: "review-scoping-inspection",
      type: "inspection:scoping",
      data: { label: "Review Scoping Inspection" },
      ...commonNodeProps(),
      coAssignees: [],
      canExecute: ["r:SuiteSpot Administrator"],
    },
    {
      id: "purchase-decision",
      type: "inspection:purchase-decision",
      data: { label: "Purchase Decision" },
      ...commonNodeProps(),
      coAssignees: [],
      canExecute: ["r:SuiteSpot Administrator"],
    },
    {
      id: "final-inspection",
      type: "inspection:final-inspection",
      data: { label: "Rent Ready Checklist" },
      ...commonNodeProps(),
      coAssignees: [],
      canExecute: ["r:SuiteSpot Administrator"],
      phaseKey: "final-walk",
    },
    {
      id: "export-chargeback-list",
      type: "export-chargeback-list",
      data: { label: "Chargeback changes not saved" },
      ...commonNodeProps(),
      coAssignees: [],
      canExecute: ["r:SuiteSpot Administrator"],
    },
    {
      id: "chargeback-items-missing-price",
      type: "chargeback-items-missing-price",
      data: { label: "Chargeback items missing price" },
      ...commonNodeProps(),
      coAssignees: [],
      canExecute: ["r:SuiteSpot Administrator"],
    },
    {
      id: "quality-control",
      type: "quality-control",
      data: { label: "Update Renovation Progress" },
      ...commonNodeProps(),
      coAssignees: [],
      canExecute: ["r:SuiteSpot Administrator"],
    },
    {
      id: "scope-has-unassigned-items",
      type: "scope-has-unassigned-items",
      data: { label: "Scope Has Unassigned Items" },
      ...commonNodeProps(),
      coAssignees: [],
      canExecute: ["r:SuiteSpot Administrator"],
    },
    {
      id: "scope-approval",
      type: "scope-approval",
      data: { label: "Approve Scope" },
      ...commonNodeProps(),
      params: {
        approvalConfirmation:
          "By approving this scope you are also approving the purchase requisitions associated with this scope. Are you sure you want to approve?",
      },
    },
    {
      id: "price-quote-vendor-no-reply",
      type: "price-quote",
      data: { label: "Awaiting Response From Vendor" },
      ...commonNodeProps(),
      coAssignees: [],
      canExecute: ["r:SuiteSpot Administrator"],
    },
    {
      id: "price-quote-awaiting-acceptance",
      type: "price-quote",
      data: { label: "Price Quote Awaiting Action" },
      ...commonNodeProps(),
      coAssignees: [],
      canExecute: ["r:SuiteSpot Administrator"],
    },
    {
      id: "price-quote-vendor-replied",
      type: "price-quote",
      data: { label: "Vendor Replied to Price Quote" },
      ...commonNodeProps(),
      coAssignees: [],
      canExecute: ["r:SuiteSpot Administrator"],
    },
    {
      id: "price-quote-needs-sending",
      type: "price-quote",
      data: { label: "Price Quote Not Sent to Vendor" },
      ...commonNodeProps(),
      coAssignees: [],
      canExecute: ["r:SuiteSpot Administrator"],
    },
    {
      id: "scope-has-assigned-items-without-price",
      type: "items-without-price",
      data: { label: "Items Need Pricing Entered" },
      ...commonNodeProps(),
      coAssignees: [],
      canExecute: ["r:SuiteSpot Administrator"],
    },
    {
      id: "scope-approval-rejected",
      type: "scope-approval-rejected",
      data: { label: "Scope Sent Back from Approval" },
      ...commonNodeProps(),
      coAssignees: [],
      canExecute: ["r:SuiteSpot Administrator"],
    },
    {
      id: "change-order-inspection",
      type: "inspection:scoping",
      data: { label: "Change Order" },
      params: {
        glCodesRequired: false,
        categoryCodesRequired: false,
        scopeAssignmentRequired: false,
        scopePricesRequired: false,
        scopeEnabled: true,
        chargebackEnabled: false,
        quotingDisabled: false,
        noApprovalRequired: false,
        serviceRequestsDisabled: true,
        simplifiedScoping: true,
        scopeParams: {
          noPurchaseOrders: false,
          useBudgetaryPricingAsOverridePrice: true,
        },
        copyFromLatest: {
          jobInspectionOfType: "scoping",
          copyPhotosAndNotes: true,
        },
      },
      ...commonNodeProps(),
      coAssignees: [],
      canExecute: ["r:SuiteSpot Administrator"],
    },
    {
      id: "work-order",
      type: "work-order",
      data: { label: "Work Order" },
      ...commonNodeProps(),
      coAssignees: [],
      canExecute: ["r:SuiteSpot Administrator"],
    },
    {
      id: "service-request-requires-attention",
      type: "entity-task",
      data: { label: "Job Requires Attention" },
      ...commonNodeProps(),
      coAssignees: [],
      canExecute: ["r:SuiteSpot Administrator"],
    },
    //========================================================================================================
    {
      id: "start",
      type: "input",
      data: { label: "Start" },
      ...commonNodeProps(),
      position: { x: 400, y: 50 },
    },
    {
      id: "new-inspection",
      type: "input",
      data: { label: "Start New Inspection" },
      ...commonNodeProps(),
    },
    {
      id: "change-order",
      type: "input",
      data: { label: "Start New Change Order" },
      ...commonNodeProps(),
    },
    {
      id: "new-quality-control-inspection",
      data: { label: "Start Quality Control Inspection" },
      manualOverrideEnabled: true,
      type: "input",
      ...commonNodeProps(),
    },
    {
      id: "start-work-order",
      type: "input",
      data: { label: "Start Work Order" },
      ...commonNodeProps(),
    },
    {
      id: "quality-control-complete",
      data: { label: "Quality Control Complete" },
      type: "input",
      ...commonNodeProps(),
    },
    {
      id: "start-move-out-inspection",
      data: { label: "Start Move-Out Inspection" },
      manualOverrideEnabled: false,
      type: "input",
      ...commonNodeProps(),
    },
    {
      id: "start-move-in-inspection",
      data: { label: "Start Move-In Inspection" },
      manualOverrideEnabled: false,
      type: "input",
      ...commonNodeProps(),
    },
    {
      id: "start-pre-inspection",
      data: { label: "Start Pre-Inspection" },
      manualOverrideEnabled: false,
      type: "input",
      ...commonNodeProps(),
    },
  ] as Node[],
  edges: [
    {
      source: "start",
      target: "scoping-inspection",
      edgeType: "smoothstep",
      animated: true,
      condition: null,
    },
    {
      source: "scoping-inspection",
      target: "review-scoping-inspection",
      edgeType: "smoothstep",
      animated: true,
      condition: null,
    },
    {
      source: "review-scoping-inspection",
      target: "purchase-decision",
      edgeType: "smoothstep",
      animated: true,
      condition: null,
    },
    {
      source: "purchase-decision",
      target: "cancel-workflow",
      edgeType: "smoothstep",
      animated: true,
      condition: "metrics && metrics.attentionRequired < 1",
    },
    {
      source: "quality-control-complete",
      target: "final-inspection",
      edgeType: "smoothstep",
      animated: true,
      condition: "!has_active_task_type('inspection:final-inspection')",
    },
    {
      source: "new-quality-control-inspection",
      target: "quality-control",
      edgeType: "smoothstep",
      animated: true,
      dataMappings: [
        {
          fromField: "purchaseOrderIds",
          toField: "purchaseOrderIds",
          constantValue: null,
          workflowDataField: null,
        },
      ],
      condition: null,
    },
    {
      source: "change-order",
      target: "change-order-inspection",
      edgeType: "smoothstep",
      animated: true,
      dataMappings: [],
      condition: null,
    },
    {
      source: "new-inspection",
      target: "change-order-inspection",
      edgeType: "smoothstep",
      animated: true,
      dataMappings: [],
      condition: null,
    },
    {
      source: "start-work-order",
      target: "work-order",
      edgeType: "smoothstep",
      animated: true,
      dataMappings: [{ fromField: "workOrderId", toField: "workOrderId" }],
    },
    {
      source: "final-inspection",
      target: "complete-workflow",
      edgeType: "smoothstep",
      animated: true,
      dataMappings: [],
      condition: null,
    },
    {
      source: "work-order",
      target: "complete-workflow",
      edgeType: "smoothstep",
      animated: true,
      dataMappings: [
        {
          fromField: null,
          toField: "reason",
          constantValue: "Job done",
          workflowDataField: null,
        },
      ],
      condition: "!hasActiveTasks && !hasDeferredTasks",
    },
  ] as Edge[],
};
